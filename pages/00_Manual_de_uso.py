import streamlit as st

st.title("Manual de uso ‚Äî RAGA (MVP)")
st.caption("Gu√≠a integrada: prop√≥sito, roles, flujo, puntos de interacci√≥n humana y cu√°ndo entra la IA.")

# Banner global (si Runbook activ√≥ una alerta)
if st.session_state.get("global_alert"):
    st.error(st.session_state["global_alert"])

# Navegaci√≥n del manual
secciones = [
    "1. Prop√≥sito y alcance",
    "2. Roles y responsabilidades (HITL)",
    "3. Requisitos e instalaci√≥n",
    "4. Estructura del proyecto",
    "5. Flujo de trabajo (visi√≥n general)",
    "6. Uso paso a paso (demo guiada)",
    "7. D√≥nde consulta la IA (y bajo qu√© control)",
    "8. Observabilidad, SLO/SLA y costes",
    "9. Cumplimiento (Policy-Gate y AI Act)",
    "10. Mantenimiento y versionado",
    "11. Glosario r√°pido",
]
section = st.sidebar.radio("Secciones del manual", secciones, index=0)

def h2(txt): st.subheader(txt)

# 1) Prop√≥sito
if section == "1. Prop√≥sito y alcance":
    h2("Prop√≥sito")
    st.write(
        "RAGA es un pipeline de informes legales/de negocio con trazabilidad y control de costes. "
        "No es un chat aut√≥nomo: **siempre hay una persona (PYME/consultor)** que gu√≠a las decisiones, "
        "y la IA se usa con l√≠mites claros (citas, umbrales de calidad y supervisi√≥n humana)."
    )
    h2("Qu√© resuelve")
    st.markdown(
        "- **Explicabilidad y evidencia**: respuestas con **citas** y **argumentaci√≥n** (CEWR).\n"
        "- **Gobernanza**: **Policy-Gate** bloquea fuentes por licencia/PII/jurisdicci√≥n antes de buscar.\n"
        "- **Calidad**: evaluaci√≥n **EEE** (heur√≠stica de demo) y bloqueo por umbral.\n"
        "- **Gesti√≥n**: **coste/latencia p50/p95** y degradaci√≥n autom√°tica (Runbook)."
    )
    h2("Alcance del MVP")
    st.markdown(
        "- Varias piezas (RAG, CEWR, EEE) est√°n **simuladas** para explicar el concepto, siempre con **persona al mando**.\n"
        "- En producci√≥n, ciertos pasos consultar√°n modelos de IA; aqu√≠ se indica **cu√°ndo** y **c√≥mo**."
    )

# 2) Roles (Human-in-the-Loop)
elif section == "2. Roles y responsabilidades (HITL)":
    h2("La persona gu√≠a; la IA asiste")
    st.markdown(
        "- **PYME/Consultor (humano)**: define objetivo, hip√≥tesis y supuestos; ajusta fuentes permitidas; "
        "elige **rutas de entrada**; valida evidencias; decide sobre conclusiones; aprueba o bloquea la salida.\n"
        "- **Sistema (RAGA)**: orquesta el flujo; aplica Policy-Gate; recupera evidencia; propone borrador con **citas**; "
        "expone mapa de argumentos; calcula m√©tricas y registra logs.\n"
        "- **IA (modelos)**: en producci√≥n, apoya en **generaci√≥n con citas**, **extracci√≥n de argumentos** y **evaluaci√≥n**; "
        "si la calidad cae bajo umbral, **no publica** sin revisi√≥n humana."
    )
    h2("Puntos de control humano")
    st.markdown(
        "1) **Intake y Plan** (obligatorio).  \n"
        "2) **Policy-Gate** (puede bloquear fuentes).  \n"
        "3) **Rutas de razonamiento** (ponderaciones y elecci√≥n).  \n"
        "4) **Revisi√≥n de evidencias/citas** (Composici√≥n).  \n"
        "5) **Aprobaci√≥n final** (si EEE/precision ‚â• umbral; si no, revisi√≥n obligatoria)."
    )

# 3) Requisitos e instalaci√≥n
elif section == "3. Requisitos e instalaci√≥n":
    h2("Requisitos")
    st.markdown(
        "- Python 3.10+.\n"
        "- Dependencias en `requirements.txt`.\n"
        "- Despliegue local (`streamlit run streamlit_app.py`) o Streamlit Cloud (Main file: `streamlit_app.py`)."
    )
    h2("Instalaci√≥n r√°pida (local)")
    st.code(
        "python -m venv .venv && source .venv/bin/activate  # Windows: .venv\\Scripts\\activate\n"
        "pip install -r requirements.txt\n"
        "streamlit run streamlit_app.py",
        language="bash",
    )
    h2("Despliegue en Streamlit Cloud")
    st.markdown(
        "- Sube el repo a GitHub.\n"
        "- En Streamlit Cloud: selecciona el repo y `streamlit_app.py` como **Main file**."
    )

# 4) Estructura del proyecto
elif section == "4. Estructura del proyecto":
    h2("Estructura")
    tree = (
        "root/\n"
        "‚îú‚îÄ streamlit_app.py        # Lanzador; enlaza a Home en /pages\n"
        "‚îú‚îÄ Home.py                 # Portada del tour\n"
        "‚îú‚îÄ pages/                  # P√°ginas del pipeline (incluye Rutas y S√≠ntesis)\n"
        "‚îú‚îÄ config/                 # policy_gate.yaml, sla.yaml, ontology.json\n"
        "‚îú‚îÄ utils/                  # policy_gate, ontology, retrieval, compose, eee, costs, logger\n"
        "‚îú‚îÄ data/sources/           # Documentos demo\n"
        "‚îî‚îÄ logs/                   # JSON de ejecuciones (trazabilidad)\n"
    )
    st.code(tree, language="text")
    h2("Convenciones clave")
    st.markdown(
        "- Tablas: `st.dataframe(..., width=\"stretch\")`.\n"
        "- Gr√°ficos: render **inline** (data URI) para evitar ficheros temporales.\n"
        "- Estado: `st.session_state` para hits, coste, alertas (`global_alert`), ruta elegida, etc."
    )

# 5) Flujo de trabajo (visi√≥n general)
elif section == "5. Flujo de trabajo (visi√≥n general)":
    h2("Pipeline con control humano e IA acotada")
    st.markdown(
        "1) **Intake y Plan** ‚Äî üßë‚Äçüíº Humano define objetivo/hip√≥tesis/supuestos. *(Sin IA)*  \n"
        "1B) **Rutas de razonamiento** ‚Äî üßë‚Äçüíº Humano pondera criterios y elige ruta. *(Sin IA)*  \n"
        "2) **Ontolog√≠a y Reescritura** ‚Äî Sistema etiqueta/re-escribe con reglas. *(Sin IA en MVP; IA opcional en prod)*  \n"
        "3) **Policy-Gate** ‚Äî Bloqueo por licencias/PII/jurisdicci√≥n. üßë‚Äçüíº puede anular. *(Sin IA)*  \n"
        "4) **RAG** ‚Äî Recuperaci√≥n top-k sobre fuentes permitidas. *(MVP sin IA; en prod embeddings)*  \n"
        "5) **Composici√≥n** ‚Äî Borrador con **citas**. *(MVP sin IA; en prod LLM con citas + plantillas)*  \n"
        "6) **CEWR** ‚Äî Mapa Claim‚ÄìEvidence‚ÄìWarrant‚ÄìRebuttal. *(MVP simulado; en prod extracci√≥n IA)*  \n"
        "7) **EEE** ‚Äî M√©trica de calidad. *(MVP heur√≠stica; en prod r√∫brica/IA + validaci√≥n humana)*  \n"
        "8) **Observabilidad** ‚Äî Coste/latencia, %citas v√°lidas. *(Sin IA)*  \n"
        "9) **Runbook** ‚Äî Incidentes y degradaci√≥n; bloqueo si baja calidad. *(Sin IA)*  \n"
        "10) **Checklist** ‚Äî Evidencias operativas. *(Sin IA)*  \n"
        "11) **Logs** ‚Äî Trazabilidad/auditor√≠a. *(Sin IA)*"
    )
    st.caption("Leyenda: üßë‚Äçüíº decisi√≥n humana; IA en producci√≥n con l√≠mites y revisi√≥n.")

# 6) Uso paso a paso (demo guiada)
elif section == "6. Uso paso a paso (demo guiada)":
    h2("Caso de demo: conservas ‚Üí M√©xico (HITL en cada paso clave)")
    st.markdown(
        "- **1) Intake/Plan (üßë‚Äçüíº)**: completa producto, mercado y supuestos; guarda.  \n"
        "- **1B) Rutas (üßë‚Äçüíº)**: ajusta pesos, compara rutas y **elige** una; guarda experimentos.  \n"
        "- **2) Ontolog√≠a**: revisa consulta original/reescrita y etiquetas (reglas).  \n"
        "- **3) Policy-Gate (üßë‚Äçüíº)**: bloquea `priv_db` y/o `stock` si procede; esto afectar√° a RAG.  \n"
        "- **4) RAG**: ajusta **k** (1‚Äì5); observa **snippets** y **coste estimado**.  \n"
        "- **5) Composici√≥n (üßë‚Äçüíº)**: abre expanders; revisa **citas** (popover); decide si falta evidencia.  \n"
        "- **6) CEWR**: verifica que las evidencias respalden la Claim; anota contraargumentos.  \n"
        "- **7) EEE (üßë‚Äçüíº)**: si la calidad no llega al umbral, **bloquea** y pide m√°s evidencia.  \n"
        "- **8) Observabilidad**: verifica tarjeta conectada a la √∫ltima b√∫squeda + series.  \n"
        "- **9) Runbook (üßë‚Äçüíº)**: simula incidente y observa el **banner global**; decide acci√≥n.  \n"
        "- **10A) S√≠ntesis (üßë‚Äçüíº)**: combina ruta, EEE, evidencia y coste en un IVI; descarga recomendaci√≥n."
    )

# 7) D√≥nde consulta la IA (y bajo qu√© control)
elif section == "7. D√≥nde consulta la IA (y bajo qu√© control)":
    h2("Puntos de IA en producci√≥n (con persona al mando)")
    st.markdown(
        "- **Composici√≥n con citas**: el LLM redacta usando **√∫nicamente** fragmentos recuperados; "
        "el humano revisa y puede devolver a RAG si faltan pruebas.\n"
        "- **CEWR (extracci√≥n de argumentos)**: el LLM propone Claim/Evidence/Warrant/Rebuttal **vinculados a citas**; "
        "el humano valida y a√±ade contraargumentos.\n"
        "- **EEE (evaluaci√≥n)**: el LLM punt√∫a seg√∫n r√∫brica; si **EEE < umbral**, la salida queda **bloqueada** hasta revisi√≥n humana.\n"
        "- **RAG (opcional)**: embeddings para recuperaci√≥n sem√°ntica; a√∫n as√≠, **Policy-Gate** filtra y el humano decide **k**."
    )
    h2("Controles y salvaguardas")
    st.markdown(
        "- **Policy-Gate previo** a cualquier consulta/uso de fuente.\n"
        "- **Citas obligatorias** visibles en el informe (trazabilidad).\n"
        "- **Umbral de calidad** (EEE/precisi√≥n): si no se alcanza, **no se publica**.\n"
        "- **Supervisi√≥n humana** en Intake/Plan, Rutas, Composici√≥n y S√≠ntesis final."
    )

# 8) Observabilidad
elif section == "8. Observabilidad, SLO/SLA y costes":
    h2("C√≥mo leer las m√©tricas")
    st.markdown(
        "- **Coste estimado (RAG)**: impacto de **k** y fuentes permitidas.\n"
        "- **Series p50/p95**: latencia y ‚Ç¨ por tarea para capacidad/finanzas.\n"
        "- **Alertas (Runbook)**: si p95 sube, degradaci√≥n (modelo/truncation/cache)."
    )
    h2("Reglas sugeridas")
    st.markdown(
        "- **SLA**: dossier ‚â§120 s; precisi√≥n normativa ‚â•95%; **EEE** ‚â• 2.5 (si no, bloqueo y revisi√≥n).\n"
        "- **SLO**: p50/p95 ‚Ç¨ por caso; degradaci√≥n si 3 d√≠as con p95 fuera."
    )

# 9) Cumplimiento
elif section == "9. Cumplimiento (Policy-Gate y AI Act)":
    h2("Policy-Gate")
    st.markdown(
        "- Filtro previo por **licencia/PII/jurisdicci√≥n**; lo bloqueado **no entra** a la b√∫squeda.\n"
        "- Mensajes visibles y logs para **auditor√≠a** (qui√©n, cu√°ndo, qu√© se bloque√≥)."
    )
    h2("Checklist AI Act (pr√°ctico)")
    st.markdown(
        "- Gesti√≥n de riesgos, gobernanza de datos, transparencia, supervisi√≥n humana, registro.\n"
        "- Evidencias operativas: citas visibles, logs, versionado de ontolog√≠a/prompts, umbrales de bloqueo."
    )

# 10) Mantenimiento y versionado
elif section == "10. Mantenimiento y versionado":
    h2("Qu√© versionar")
    st.markdown(
        "- **Ontolog√≠a y prompts**: versionado y deprecaci√≥n.\n"
        "- **Policy-Gate**: cambios de licencias/PII logados.\n"
        "- **SLA/SLO**: umbrales por caso con registro de cambios.\n"
        "- **Fuentes**: altas/bajas con justificaci√≥n y fecha."
    )
    h2("Escalado posterior")
    st.markdown(
        "- Sustituir `retrieval.py` por BM25/embeddings.\n"
        "- Reemplazar `eee.py` por r√∫brica validada (con fiabilidad interevaluador).\n"
        "- Conectar a BOE/DOUE reales y data warehouse de m√©tricas."
    )

# 11) Glosario
elif section == "11. Glosario r√°pido":
    h2("T√©rminos clave")
    st.markdown(
        "- **Ontolog√≠a**: conceptos/relaciones que gu√≠an la b√∫squeda.\n"
        "- **RAG**: recuperaci√≥n de trozos relevantes antes de generar.\n"
        "- **CEWR**: mapa Claim‚ÄìEvidence‚ÄìWarrant‚ÄìRebuttal.\n"
        "- **EEE**: m√©trica de calidad del razonamiento.\n"
        "- **SLA/SLO**: compromisos externos/internos de servicio.\n"
        "- **Policy-Gate**: gate de licencias/PII/jurisdicci√≥n previo a uso de fuente.\n"
        "- **p50/p95**: mediana y ‚Äúpeor de los buenos‚Äù."
    )
